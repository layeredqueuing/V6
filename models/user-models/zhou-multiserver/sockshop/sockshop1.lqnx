<?xml version="1.0"?>
<!-- $Id: sockshop1.lqnx 15366 2022-01-11 16:01:08Z greg $ -->
<!-- lqn2xml -->
<lqn-model name="sockshop" description="lqn2xml 6.1 solution for model from: sockshop.lqn." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="file:///C:/Program Files/LQN Solvers/lqn.xsd">
   <solver-params comment="Siyu's version solved using LQX" conv_val="1e-06" it_limit="200" underrelax_coeff="0.9" print_int="1">
   </solver-params>
     <processor name="UserP" scheduling="inf">
      <task name="User1" scheduling="ref" multiplicity="$n1">
         <entry name="user1" type="PH1PH2">
            <entry-phase-activities>
               <activity name="user1_1" phase="1" host-demand-mean="$Z1">
                  <synch-call dest="logindelay" calls-mean="0.6"/>
                  <synch-call dest="logoutdelay" calls-mean="0.6"/>
                  <synch-call dest="add" calls-mean="1"/>
                  <synch-call dest="remove" calls-mean="1"/>
                  <synch-call dest="display" calls-mean="0.2"/>
                  <synch-call dest="pay" calls-mean="5"/>
                  <synch-call dest="placeOrder" calls-mean="1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
      <task name="User2" scheduling="ref" multiplicity="$n2">
         <entry name="user2" type="PH1PH2">
            <entry-phase-activities>
               <activity name="user2_1" phase="1" host-demand-mean="$Z2">
                  <synch-call dest="logindelay" calls-mean="0.5"/>
                  <synch-call dest="logoutdelay" calls-mean="0.5"/>
                  <synch-call dest="add" calls-mean="1"/>
                  <synch-call dest="remove" calls-mean="1"/>
                  <synch-call dest="display" calls-mean="1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="CartP" scheduling="fcfs">
      <task name="Cart" scheduling="fcfs">
         <entry name="add" type="PH1PH2">
            <entry-phase-activities>
               <activity name="add_1" phase="1" host-demand-mean="0.5"/>
            </entry-phase-activities>
         </entry>
         <entry name="remove" type="PH1PH2">
            <entry-phase-activities>
               <activity name="remove_1" phase="1" host-demand-mean="0.5"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="PaymentP" scheduling="fcfs">
      <task name="Payment" scheduling="fcfs">
         <entry name="pay" type="PH1PH2">
            <entry-phase-activities>
               <activity name="pay_1" phase="1" host-demand-mean="1.5"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="CataP" scheduling="fcfs">
      <task name="Catalogue" scheduling="fcfs">
         <entry name="display" type="PH1PH2">
            <entry-phase-activities>
               <activity name="display_1" phase="1" host-demand-mean="0.4">
                  <synch-call dest="connect" calls-mean="2"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
      <task name="CataSQL" scheduling="fcfs">
         <entry name="connect" type="PH1PH2">
            <entry-phase-activities>
               <activity name="connect_1" phase="1" host-demand-mean="0.1">
                  <synch-call dest="diskread" calls-mean="0.1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="OrderP" scheduling="fcfs">
      <task name="Order" scheduling="fcfs">
         <entry name="placeOrder" type="PH1PH2">
            <entry-phase-activities>
               <activity name="placeOrder_1" phase="1" host-demand-mean="0.5">
                  <synch-call dest="mongo3update" calls-mean="2"/>
                  <synch-call dest="address" calls-mean="0.5"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
      <task name="OrderMongo" scheduling="fcfs">
         <entry name="mongo3update" type="PH1PH2">
            <entry-phase-activities>
               <activity name="mongo3update_1" phase="1" host-demand-mean="0.8">
                  <synch-call dest="disk3read" calls-mean="1.1"/>
                  <synch-call dest="disk3write" calls-mean="1.1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="ShipP" scheduling="fcfs">
      <task name="Shipping" scheduling="fcfs">
         <entry name="address" type="PH1PH2">
            <entry-phase-activities>
               <activity name="address_1" phase="1" host-demand-mean="0.5"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="LoginP" scheduling="inf">
      <task name="Userwait" scheduling="inf">
         <entry name="logindelay" type="PH1PH2">
            <entry-phase-activities>
               <activity name="logindelay_1" phase="1" host-demand-mean="$W" call-order="DETERMINISTIC">
                  <synch-call dest="login" calls-mean="1"/>
               </activity>
            </entry-phase-activities>
         </entry>
         <entry name="logoutdelay" type="PH1PH2">
            <entry-phase-activities>
               <activity name="logoutdelay_1" phase="1" host-demand-mean="$W" call-order="DETERMINISTIC">
                  <synch-call dest="logout" calls-mean="1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
      <task name="Userlogin" scheduling="inf">
         <entry name="login" type="PH1PH2">
            <entry-phase-activities>
               <activity name="login_1" phase="1" host-demand-mean="10"/>
            </entry-phase-activities>
         </entry>
         <entry name="logout" type="PH1PH2">
            <entry-phase-activities>
               <activity name="logout_1" phase="1" host-demand-mean="5"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="DiskP" scheduling="fcfs">
      <task name="Disk" scheduling="fcfs">
         <entry name="diskread" type="PH1PH2">
            <entry-phase-activities>
               <activity name="diskread_1" phase="1" host-demand-mean="0.2"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="Disk3P" scheduling="fcfs">
      <task name="Disk3" scheduling="fcfs">
         <entry name="disk3read" type="PH1PH2">
            <entry-phase-activities>
               <activity name="disk3read_1" phase="1" host-demand-mean="0.4"/>
            </entry-phase-activities>
         </entry>
         <entry name="disk3write" type="PH1PH2">
            <entry-phase-activities>
               <activity name="disk3write_1" phase="1" host-demand-mean="0.4"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <lqx><![CDATA[_0 = 0;
           
function waitAB(N,m,S,P){
    nMax = min(N,m);
    nMaxM1 = nMax - 1;
    pw = array_create();
    logpw = array_create();
    Nm1 = N-1;
    pw[0]= pow(1-P,Nm1); 
    pDash = pw[0];
    M2 = 0;
    if (m>1){
      for (i = 1; i<=nMaxM1; i = i+1) {
	     pw[i] = pw[i-1]*P*(N-i)/(i*(1-P));
	   }
      for (i = 1; i<=nMaxM1; i = i+1) {
	      pDash = pDash + pw[i];
         M2 = M2 + i*pw[i];
      }
    }
    L = P*(Nm1)-(m-1)*(1-pDash) - M2;
    return(L*S/m);
}

M = 2;
$Z1 = 10;
$Z2 = 5;
$W = 100;
ZZ1 = 0;
tp1 = 0;
N1 = array_create();
N2 = array_create();
N1 = [1,5,10,20,50,100];
N2 = [1,5,10,20,50,100];
E1 = entry("user1");
E2 = entry("user2");
E3 = entry("login");
E4 = entry("logout");
P1 = processor("LoginP");
T3 = task("Userlogin");

println( "$N1, $N2, $W, $S1, $S2, $ZZ1, $ZZ2, $tp1, $tp2, $RT1, $RT2, $X1, $X2" );
for (x=0;x<6;x=x+1){
   for (y=0;y<6;y=y+1){
      $n1 = N1[x];
      $n2 = N2[y];
      S_N = $n1+$n2;
      eps = 1;
      while (eps > 1.e-6){  
         solve();
         //chain service times (submodel)
         S1 = (0.6*E3.phase1_service_time+0.6*E4.phase1_service_time)/1.2; 
         S2 = 0.5*E3.phase1_service_time+0.5*E4.phase1_service_time;
         //chain throughputs (submodel)
         tp1 = E1.throughput*1.2; 
         tp2 = E2.throughput;
         //chain1 think times (submodel)
         ZZ1 = $n1/tp1-S1-$W; 
         ZZ2 = $n2/tp2-S2-$W;
         //proporations by throughput for chains           
         Prop1 = tp1/(tp1+tp2); 
         Prop2 = tp2/(tp1+tp2);
         MergedS = Prop1*S1 + Prop2*S2; //weighted average service time
         MergedZ = Prop1*ZZ1 + Prop2*ZZ2; //weighted average think time
         MergedP = (MergedS+$W)/(MergedZ + MergedS + $W); //corresponding probability 
         Wnew = waitAB(S_N, M, MergedS,MergedP);
         eps = abs($W - Wnew);
         $W = Wnew;
         //Model response times for classes
         RT1 = $n1/(E1.throughput)-$Z1;
         RT2 = $n2/(E2.throughput)-$Z2;

      }
      println_spaced(", ",$n1,$n2,$W,S1,S2,ZZ1,ZZ2,tp1,tp2,RT1,RT2,E1.throughput,E2.throughput);
   }
}

]]></lqx>
</lqn-model>
