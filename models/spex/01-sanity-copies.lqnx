<?xml version="1.0"?>
<!-- lqn2lqn -Olqx -->
<lqn-model name="" description="lqn2lqn 6.0 solution for model from: ." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/usr/local/share/lqns/lqn.xsd">
   <solver-params comment="SPEX test - copies." conv_val="1e-05" it_limit="50" underrelax_coeff="0.9" print_int="10"/>
   <processor name="client" scheduling="inf">
      <task name="client" scheduling="ref" multiplicity="$c">
         <entry name="client" type="PH1PH2">
            <entry-phase-activities>
               <activity name="client_1" phase="1" host-demand-mean="1">
                  <synch-call dest="server" calls-mean="1"/>
               </activity>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <processor name="server" scheduling="fcfs" multiplicity="$m">
      <task name="server" scheduling="inf">
         <entry name="server" type="PH1PH2">
            <entry-phase-activities>
               <activity name="server_1" phase="1" host-demand-mean="1"/>
            </entry-phase-activities>
         </entry>
      </task>
   </processor>
   <lqx><![CDATA[
_m = array_create(1, 2, 3, 4, @infinity);
_0 = 0;
f = 0;
u = 0;
println_spaced(", ", "$c", "$m", "$f", "$u");
for ( c = 1; c <= 4; c = (c + 1)) {
  foreach( m in _m ) { 
    if ( m <= c || m == @infinity ) {
      $c = c;
      $m = m;
      _0 = (_0 + 1);
      if (solve()) {
        f = task("client").throughput;
        u = processor("server").utilization;
        println_spaced(", ", $c, $m, f, u);
      } else {
        println("solver failed: $0=", _0);
      }
    }
  }}]]>
   </lqx>
</lqn-model>
